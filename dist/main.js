(() => {
  // src/ui/config.tsx
  function Config() {
    return /* @__PURE__ */ h("div", null, /* @__PURE__ */ h("h1", null, "KINDYEAR Music Info"), /* @__PURE__ */ h("p", null, "\u672C\u63D2\u4EF6\u53EF\u4EE5\u8F93\u51FA\u6B4C\u66F2\u7684\u540D\u79F0\u3001\u6B4C\u624B\u540D\u79F0\u81F3\u672C\u5730txt\u6587\u4EF6\uFF0C\u5C01\u9762\u4FDD\u5B58\u4E3A\u672C\u5730\u56FE\u7247"), /* @__PURE__ */ h("p", null, "\u53EF\u5728OBS\u7B49\u76F4\u64AD\u8F6F\u4EF6\u4E2D\u8BFB\u53D6\u672C\u5730\u6587\u672C\u6216\u56FE\u7247\u5B9E\u73B0\u663E\u793A"), /* @__PURE__ */ h("p", null, "\u8F93\u51FA\u7684\u4FE1\u606F\u76EE\u5F55\u4E3A\u63D2\u4EF6\u76EE\u5F55\u7684plugins_runtime/KINDYEAR-MusicInfo/output"));
  }

  // src/main.ts
  plugin.onConfig(() => {
    const element = document.createElement("div");
    ReactDOM.render(Config(), element);
    return element;
  });
  var musicInfoTitle = null;
  var musicInfoArtist = null;
  var musicInfoCoverUrl = null;
  var oldMusicInfoTitle = null;
  var oldMusicInfoArtist = null;
  var oldMusicInfoCoverUrl = null;
  var dev = betterncm_native.fs.exists("plugins_dev/KINDYEAR-MusicInfo/");
  plugin.onLoad(async () => {
    console.log("[KMI] KMI Loaded,Dev mode:", dev);
    legacyNativeCmder.appendRegisterCall("Load", "audioplayer", () => {
      const observer = new MutationObserver(async () => {
        const titleElement2 = document.querySelector("a.title");
        const artistElement = document.querySelector("a.artist");
        const coverElement = document.querySelector("img.front.normal.j-cover");
        if (titleElement2) {
          musicInfoTitle = titleElement2.getAttribute("title");
        }
        if (artistElement) {
          musicInfoArtist = artistElement.textContent;
        }
        if (coverElement) {
          musicInfoCoverUrl = coverElement.getAttribute("src");
        }
        await saveMusicInfo(musicInfoTitle, musicInfoArtist, musicInfoCoverUrl);
      });
      const titleElement = document.querySelector("a.title.f-oh.j-title");
      if (titleElement) {
        observer.observe(document.body, { childList: true, subtree: true });
      } else {
        console.error("Title element not found!");
      }
    });
    window.addEventListener("DOMContentLoaded", () => {
    });
  });
  function checkMusicInfo(title, artist, coverUrl) {
    return title !== oldMusicInfoTitle || artist !== oldMusicInfoArtist || coverUrl !== oldMusicInfoCoverUrl;
  }
  async function saveMusicInfo(title, artist, coverUrl) {
    const imageUrl = coverUrl?.match(/https:\/\/[^/]+\/[^?]+/)?.[0];
    if (checkMusicInfo(title, artist, imageUrl)) {
      let dataPath = await betterncm.app.getDataPath();
      if (dev === true) {
        const titleSaveResult = betterncm_native.fs.writeFileText(`${dataPath}\\plugins_dev\\KINDYEAR-MusicInfo\\output\\Title.txt`, `${title}`);
        const artistSaveResult = betterncm_native.fs.writeFileText(`${dataPath}\\plugins_dev\\KINDYEAR-MusicInfo\\output\\Artist.txt`, `${artist}`);
        const outputPath = `${dataPath}\\plugins_dev\\KINDYEAR-MusicInfo\\output\\Cover.png`;
        const coverSaveResult = await betterncm.app.exec(`wget -O "${outputPath}" "${imageUrl}"`);
        console.log(`[KMI] [DEV] Music Info: ${title} - ${artist} - ${imageUrl},info is different, save.`);
        console.log(`[KMI] [DEV] Save Result: Title:${titleSaveResult} - Artist:${artistSaveResult} - Cover:${coverSaveResult}`);
      } else {
        const titleSaveResult = betterncm_native.fs.writeFileText(`${dataPath}\\plugins_runtime\\KINDYEAR-MusicInfo\\output\\Title.txt`, `${title}`);
        const artistSaveResult = betterncm_native.fs.writeFileText(`${dataPath}\\plugins_runtime\\KINDYEAR-MusicInfo\\output\\Artist.txt`, `${artist}`);
        const outputPath = `${dataPath}\\plugins_runtime\\KINDYEAR-MusicInfo\\output\\Cover.png`;
        const coverSaveResult = await betterncm.app.exec(`powershell.exe Invoke-WebRequest -Uri "${imageUrl}" -OutFile "${outputPath}"`);
        console.log(`[KMI] Music Info: ${title} - ${artist} - ${imageUrl},info is different, save.`);
        if (coverSaveResult === true) {
          console.log(`[KMI] Save Result: Title:${titleSaveResult} - Artist:${artistSaveResult} - Cover:${coverSaveResult}`);
        } else {
          console.error(`[KMI] Save Result: Title:${titleSaveResult} - Artist:${artistSaveResult} - Cover:${coverSaveResult}`);
        }
      }
      oldMusicInfoTitle = title;
      oldMusicInfoArtist = artist;
      oldMusicInfoCoverUrl = imageUrl;
    }
  }
  plugin.onAllPluginsLoaded(() => {
  });
})();
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vc3JjL3VpL2NvbmZpZy50c3giLCAiLi4vc3JjL21haW4udHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImV4cG9ydCBmdW5jdGlvbiBDb25maWcoKSB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgIDxoMT5LSU5EWUVBUiBNdXNpYyBJbmZvPC9oMT5cclxuICAgICAgICAgICAgPHA+XHU2NzJDXHU2M0QyXHU0RUY2XHU1M0VGXHU0RUU1XHU4RjkzXHU1MUZBXHU2QjRDXHU2NkYyXHU3Njg0XHU1NDBEXHU3OUYwXHUzMDAxXHU2QjRDXHU2MjRCXHU1NDBEXHU3OUYwXHU4MUYzXHU2NzJDXHU1NzMwdHh0XHU2NTg3XHU0RUY2XHVGRjBDXHU1QzAxXHU5NzYyXHU0RkREXHU1QjU4XHU0RTNBXHU2NzJDXHU1NzMwXHU1NkZFXHU3MjQ3PC9wPlxyXG4gICAgICAgICAgICA8cD5cdTUzRUZcdTU3MjhPQlNcdTdCNDlcdTc2RjRcdTY0QURcdThGNkZcdTRFRjZcdTRFMkRcdThCRkJcdTUzRDZcdTY3MkNcdTU3MzBcdTY1ODdcdTY3MkNcdTYyMTZcdTU2RkVcdTcyNDdcdTVCOUVcdTczQjBcdTY2M0VcdTc5M0E8L3A+XHJcbiAgICAgICAgICAgIDxwPlx1OEY5M1x1NTFGQVx1NzY4NFx1NEZFMVx1NjA2Rlx1NzZFRVx1NUY1NVx1NEUzQVx1NjNEMlx1NEVGNlx1NzZFRVx1NUY1NVx1NzY4NHBsdWdpbnNfcnVudGltZS9LSU5EWUVBUi1NdXNpY0luZm8vb3V0cHV0PC9wPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgKTtcclxufSIsICIvKlxyXG4gICAgQEF1dGhvcjogS0lORFlFQVJcclxuICAgIEBEZXNjcmlwdGlvbjogS0lORFlFQVIgTXVzaWMgSW5mb1xyXG4gICAgQERhdGU6IDIwMjQvMy8xNlxyXG4gICAgQFZlcnNpb246IDEuMC4xXHJcbiovXHJcblxyXG5pbXBvcnQge0NvbmZpZ30gZnJvbSBcIi4vdWkvY29uZmlnXCI7XHJcblxyXG5wbHVnaW4ub25Db25maWcoKCkgPT4ge1xyXG4gICAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICBSZWFjdERPTS5yZW5kZXIoQ29uZmlnKCksIGVsZW1lbnQpO1xyXG4gICAgcmV0dXJuIGVsZW1lbnQ7XHJcbn0pO1xyXG5cclxuLy8gIFx1NUI5QVx1NEU0OVx1NTE0M1x1N0QyMFx1NTNEOFx1OTFDRlxyXG5sZXQgbXVzaWNJbmZvVGl0bGU6c3RyaW5nID0gbnVsbDtcclxubGV0IG11c2ljSW5mb0FydGlzdDpzdHJpbmcgPSBudWxsO1xyXG5sZXQgbXVzaWNJbmZvQ292ZXJVcmw6c3RyaW5nID0gbnVsbDtcclxuXHJcbmxldCBvbGRNdXNpY0luZm9UaXRsZTpzdHJpbmcgPSBudWxsO1xyXG5sZXQgb2xkTXVzaWNJbmZvQXJ0aXN0OnN0cmluZyA9IG51bGw7XHJcbmxldCBvbGRNdXNpY0luZm9Db3ZlclVybDpzdHJpbmcgPSBudWxsO1xyXG5cclxuY29uc3QgZGV2ID0gYmV0dGVybmNtX25hdGl2ZS5mcy5leGlzdHMoJ3BsdWdpbnNfZGV2L0tJTkRZRUFSLU11c2ljSW5mby8nKTtcclxuXHJcbnBsdWdpbi5vbkxvYWQoYXN5bmMgKCkgPT4ge1xyXG4gICAgY29uc29sZS5sb2coXCJbS01JXSBLTUkgTG9hZGVkLERldiBtb2RlOlwiLGRldik7XHJcbiAgICBsZWdhY3lOYXRpdmVDbWRlci5hcHBlbmRSZWdpc3RlckNhbGwoJ0xvYWQnLCdhdWRpb3BsYXllcicsKCk9PntcclxuXHJcblxyXG4gICAgICAgIC8vICBcdTVGMDBcdTU5Q0JvYnNlcnZlclx1NTE0M1x1N0QyMFx1NzZEMVx1NTQyQ1xyXG4gICAgICAgIGNvbnN0IG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCB0aXRsZUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiYS50aXRsZVwiKTtcclxuICAgICAgICAgICAgY29uc3QgYXJ0aXN0RWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJhLmFydGlzdFwiKTtcclxuICAgICAgICAgICAgY29uc3QgY292ZXJFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImltZy5mcm9udC5ub3JtYWwuai1jb3ZlclwiKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aXRsZUVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgIG11c2ljSW5mb1RpdGxlID0gdGl0bGVFbGVtZW50LmdldEF0dHJpYnV0ZShcInRpdGxlXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChhcnRpc3RFbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICBtdXNpY0luZm9BcnRpc3QgPSBhcnRpc3RFbGVtZW50LnRleHRDb250ZW50O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChjb3ZlckVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgIG11c2ljSW5mb0NvdmVyVXJsID0gY292ZXJFbGVtZW50LmdldEF0dHJpYnV0ZShcInNyY1wiKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgYXdhaXQgc2F2ZU11c2ljSW5mbyhtdXNpY0luZm9UaXRsZSwgbXVzaWNJbmZvQXJ0aXN0LCBtdXNpY0luZm9Db3ZlclVybCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGNvbnN0IHRpdGxlRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJhLnRpdGxlLmYtb2guai10aXRsZVwiKTtcclxuICAgICAgICBpZiAodGl0bGVFbGVtZW50KSB7XHJcbiAgICAgICAgICAgIG9ic2VydmVyLm9ic2VydmUoZG9jdW1lbnQuYm9keSwge2NoaWxkTGlzdDogdHJ1ZSwgc3VidHJlZTogdHJ1ZX0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJUaXRsZSBlbGVtZW50IG5vdCBmb3VuZCFcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfSlcclxuXHJcbiAgICAvLyAgXHU3QjQ5XHU1Rjg1XHU5ODc1XHU5NzYyXHU1MkEwXHU4RjdEXHU1QjhDXHU2QkQ1XHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgKCkgPT4ge1xyXG5cclxuICAgIH0pO1xyXG59KTtcclxuXHJcbmZ1bmN0aW9uIGNoZWNrTXVzaWNJbmZvKHRpdGxlOiBzdHJpbmcgfCBudWxsLCBhcnRpc3Q6IHN0cmluZyB8IG51bGwsIGNvdmVyVXJsOiBzdHJpbmcgfCBudWxsKSB7XHJcbiAgICAvLyBcdTY4QzBcdTY3RTVcdTk3RjNcdTRFNTBcdTRGRTFcdTYwNkZcdTY2MkZcdTU0MjZcdTUzRDFcdTc1MUZcdTUzRDhcdTUzMTZcclxuICAgIHJldHVybiB0aXRsZSAhPT0gb2xkTXVzaWNJbmZvVGl0bGUgfHwgYXJ0aXN0ICE9PSBvbGRNdXNpY0luZm9BcnRpc3QgfHwgY292ZXJVcmwgIT09IG9sZE11c2ljSW5mb0NvdmVyVXJsO1xyXG59XHJcblxyXG5hc3luYyBmdW5jdGlvbiBzYXZlTXVzaWNJbmZvKHRpdGxlOiBzdHJpbmcgfCBudWxsLCBhcnRpc3Q6IHN0cmluZyB8IG51bGwsIGNvdmVyVXJsOiBzdHJpbmcgfCBudWxsKSB7XHJcbiAgICBjb25zdCBpbWFnZVVybCA9IGNvdmVyVXJsPy5tYXRjaCgvaHR0cHM6XFwvXFwvW14vXStcXC9bXj9dKy8pPy5bMF07XHJcblxyXG4gICAgaWYgKGNoZWNrTXVzaWNJbmZvKHRpdGxlLCBhcnRpc3QsIGltYWdlVXJsKSkge1xyXG4gICAgICAgIC8vICBcdTgzQjdcdTUzRDZCZXR0ZXJOQ01cdTYzRDJcdTRFRjZcdTc2RUVcdTVGNTVcclxuICAgICAgICBsZXQgZGF0YVBhdGggPSBhd2FpdCBiZXR0ZXJuY20uYXBwLmdldERhdGFQYXRoKCk7XHJcblxyXG4gICAgICAgIGlmKGRldiA9PT0gdHJ1ZSl7XHJcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgY29uc3QgdGl0bGVTYXZlUmVzdWx0ID0gYmV0dGVybmNtX25hdGl2ZS5mcy53cml0ZUZpbGVUZXh0KGAke2RhdGFQYXRofVxcXFxwbHVnaW5zX2RldlxcXFxLSU5EWUVBUi1NdXNpY0luZm9cXFxcb3V0cHV0XFxcXFRpdGxlLnR4dGAsIGAke3RpdGxlfWApXHJcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgY29uc3QgYXJ0aXN0U2F2ZVJlc3VsdCA9IGJldHRlcm5jbV9uYXRpdmUuZnMud3JpdGVGaWxlVGV4dChgJHtkYXRhUGF0aH1cXFxccGx1Z2luc19kZXZcXFxcS0lORFlFQVItTXVzaWNJbmZvXFxcXG91dHB1dFxcXFxBcnRpc3QudHh0YCwgYCR7YXJ0aXN0fWApXHJcbiAgICAgICAgICAgIGNvbnN0IG91dHB1dFBhdGggPSBgJHtkYXRhUGF0aH1cXFxccGx1Z2luc19kZXZcXFxcS0lORFlFQVItTXVzaWNJbmZvXFxcXG91dHB1dFxcXFxDb3Zlci5wbmdgO1xyXG4gICAgICAgICAgICBjb25zdCBjb3ZlclNhdmVSZXN1bHQgPSBhd2FpdCBiZXR0ZXJuY20uYXBwLmV4ZWMoYHdnZXQgLU8gXCIke291dHB1dFBhdGh9XCIgXCIke2ltYWdlVXJsfVwiYCk7XHJcblxyXG4gICAgICAgICAgICAvLyAgXHU2MjUzXHU1MzcwXHU0RkREXHU1QjU4XHU2MEM1XHU1MUI1XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBbS01JXSBbREVWXSBNdXNpYyBJbmZvOiAke3RpdGxlfSAtICR7YXJ0aXN0fSAtICR7aW1hZ2VVcmx9LGluZm8gaXMgZGlmZmVyZW50LCBzYXZlLmApO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgW0tNSV0gW0RFVl0gU2F2ZSBSZXN1bHQ6IFRpdGxlOiR7dGl0bGVTYXZlUmVzdWx0fSAtIEFydGlzdDoke2FydGlzdFNhdmVSZXN1bHR9IC0gQ292ZXI6JHtjb3ZlclNhdmVSZXN1bHR9YCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgY29uc3QgdGl0bGVTYXZlUmVzdWx0ID0gYmV0dGVybmNtX25hdGl2ZS5mcy53cml0ZUZpbGVUZXh0KGAke2RhdGFQYXRofVxcXFxwbHVnaW5zX3J1bnRpbWVcXFxcS0lORFlFQVItTXVzaWNJbmZvXFxcXG91dHB1dFxcXFxUaXRsZS50eHRgLCBgJHt0aXRsZX1gKVxyXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgIGNvbnN0IGFydGlzdFNhdmVSZXN1bHQgPSBiZXR0ZXJuY21fbmF0aXZlLmZzLndyaXRlRmlsZVRleHQoYCR7ZGF0YVBhdGh9XFxcXHBsdWdpbnNfcnVudGltZVxcXFxLSU5EWUVBUi1NdXNpY0luZm9cXFxcb3V0cHV0XFxcXEFydGlzdC50eHRgLCBgJHthcnRpc3R9YClcclxuICAgICAgICAgICAgY29uc3Qgb3V0cHV0UGF0aCA9IGAke2RhdGFQYXRofVxcXFxwbHVnaW5zX3J1bnRpbWVcXFxcS0lORFlFQVItTXVzaWNJbmZvXFxcXG91dHB1dFxcXFxDb3Zlci5wbmdgO1xyXG4gICAgICAgICAgICBjb25zdCBjb3ZlclNhdmVSZXN1bHQgPSBhd2FpdCBiZXR0ZXJuY20uYXBwLmV4ZWMoYHBvd2Vyc2hlbGwuZXhlIEludm9rZS1XZWJSZXF1ZXN0IC1VcmkgXCIke2ltYWdlVXJsfVwiIC1PdXRGaWxlIFwiJHtvdXRwdXRQYXRofVwiYCk7XHJcblxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgW0tNSV0gTXVzaWMgSW5mbzogJHt0aXRsZX0gLSAke2FydGlzdH0gLSAke2ltYWdlVXJsfSxpbmZvIGlzIGRpZmZlcmVudCwgc2F2ZS5gKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChjb3ZlclNhdmVSZXN1bHQgPT09IHRydWUpe1xyXG4gICAgICAgICAgICAgICAgLy8gIFx1NjI1M1x1NTM3MFx1NEZERFx1NUI1OFx1NjBDNVx1NTFCNVxyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFtLTUldIFNhdmUgUmVzdWx0OiBUaXRsZToke3RpdGxlU2F2ZVJlc3VsdH0gLSBBcnRpc3Q6JHthcnRpc3RTYXZlUmVzdWx0fSAtIENvdmVyOiR7Y292ZXJTYXZlUmVzdWx0fWApO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihgW0tNSV0gU2F2ZSBSZXN1bHQ6IFRpdGxlOiR7dGl0bGVTYXZlUmVzdWx0fSAtIEFydGlzdDoke2FydGlzdFNhdmVSZXN1bHR9IC0gQ292ZXI6JHtjb3ZlclNhdmVSZXN1bHR9YCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFx1NjZGNFx1NjVCMFx1NjVFN1x1NzY4NFx1OTdGM1x1NEU1MFx1NEZFMVx1NjA2RlxyXG4gICAgICAgIG9sZE11c2ljSW5mb1RpdGxlID0gdGl0bGU7XHJcbiAgICAgICAgb2xkTXVzaWNJbmZvQXJ0aXN0ID0gYXJ0aXN0O1xyXG4gICAgICAgIG9sZE11c2ljSW5mb0NvdmVyVXJsID0gaW1hZ2VVcmw7XHJcbiAgICB9XHJcbn1cclxuXHJcbnBsdWdpbi5vbkFsbFBsdWdpbnNMb2FkZWQoKCkgPT4ge1xyXG4gICAvLyBUT0RPIFx1NkI0Q1x1OEJDRFx1NTJBMFx1OEY3RFx1NjNEMlx1NEVGNlxyXG59KTtcclxuIl0sCiAgIm1hcHBpbmdzIjogIjs7QUFBTyxXQUFTLFNBQVM7QUFDckIsV0FDSSxrQkFBQyxhQUNHLGtCQUFDLFlBQUcscUJBQW1CLEdBQ3ZCLGtCQUFDLFdBQUUscU1BQW1DLEdBQ3RDLGtCQUFDLFdBQUUsbUlBQXdCLEdBQzNCLGtCQUFDLFdBQUUseUhBQXNELENBQzdEO0FBQUEsRUFFUjs7O0FDQUEsU0FBTyxTQUFTLE1BQU07QUFDbEIsVUFBTSxVQUFVLFNBQVMsY0FBYyxLQUFLO0FBQzVDLGFBQVMsT0FBTyxPQUFPLEdBQUcs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
